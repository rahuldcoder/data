http://web.archive.org/web/20141111203257id_/http://www.cnn.com:80/2011/10/14/tech/innovation/dennis-ritchie-obit-bell-labs

-- the tributes to @entity2 wo n't match the river of praise that spilled out over the web after the death of @entity7			1
" when @entity7 died last week , there was a huge outcry , and that was very moving and justified			0
but @entity2 had a bigger effect , and the public does n't even know who he is , " says @entity12 , the programming legend and current googler who spent 20 years working across the hall from @entity2 at the famed @entity17			1
on wednesday evening , with a post to @entity22 , @entity12 announced that @entity2 had died at his home in @entity24 over the weekend after a long illness , and though the response from hardcore techies was immense , the collective eulogy from the web at large does n't quite do justice to @entity2 's sweeping influence on the modern world			1
@entity2 is the father of the c programming language , and with fellow @entity17 researcher @entity34 , he used @entity35 to build @entity36 , the operating system that so much of the world is built on -- including the @entity39 empire overseen by @entity7			1
@entity42 's @entity41 blog : without @entity2 , you would n't be reading this " pretty much everything on the web uses those two things : @entity48 and @entity36 , " @entity12 tells @entity0			1
" the browsers are written in @entity51 unix kernel â € ” that pretty much the entire @entity52 runs on -- is written in @entity54 web servers are written in @entity35 , and if they 're not , they 're written in @entity57 or @entity58 , which are c derivatives , or @entity60 or @entity61 , which are implemented in @entity54 and all of the network hardware running these programs i can almost guarantee were written in @entity54 " it 's really hard to overstate how much of the modern information economy is built on the work @entity2 did			1
" even @entity69 was once written in @entity35 , he adds , and @entity36 underpins both @entity71 , @entity39 's desktop operating system , and @entity73 , which runs the @entity74 and the @entity75			1
" @entity7 was the king of the visible , and @entity2 is the king of what is largely invisible , " says @entity76 , professor of electrical engineering and computer science at @entity78 and a member of the @entity80 and @entity81			1
" @entity7 ' genius is that he builds these products that people really like to use because he has taste and can build things that people really find compelling			2
@entity2 built things that technologists were able to use to build core infrastructure that people do n't necessarily see much anymore , but they use everyday			1
" from b to c @entity2 built @entity35 because he and @entity34 needed a better way to build @entity36			1
the original unix kernel was written in assembly language , but they soon decided they needed a " higher level " language , something that would give them more control over all the data that spanned the os. around 1970 , they tried building a second version with @entity109 , but this did n't quite cut it , and @entity2 proposed a new language based on a @entity34 creation known as @entity114 depending on which legend you believe , @entity94 was named either for @entity34 's wife @entity117 or @entity118 , a language developed at @entity120 in the mid- 60s			1
whatever the case , @entity94 begat @entity54 @entity94 was an interpreted language -- meaning it was executed by an intermediate piece of software running atop a cpu -- but @entity48 was a compiled language			2
it was translated into machine code , and then directly executed on the cpu			0
but in those days , @entity128 was considered a high - level language			2
it would give @entity2 and @entity34 the flexibility they needed , but at the same time , it would be fast			1
that first version of the language was n't all that different from @entity128 as we know it today -- though it was a tad simpler			0
it offered full data structures and " types " for defining variables , and this is what @entity144 and @entity34 used to build their new unix kernel			0
" they built @entity35 to write a program , " says @entity12 , who would join @entity17 10 years later			1
" and the program they wanted to write was the unix kernel			0
" @entity2 's running joke was that @entity128 had " the power of assembly language and the convenience of ... assembly language			1
" in other words , he acknowledged that @entity35 was a less - than - gorgeous creation that still ran very close to the hardware			2
today , it 's considered a low - level language , not high			0
but @entity2 's joke did n't quite do justice to the new language			1
in offering true data structures , it operated at a level that was just high enough			0
" when you 're writing a large program -- and that 's what @entity36 was -- you have to manage the interactions between all sorts of different components : all the users , the file system , the disks , the program execution , and in order to manage that effectively , you need to have a good representation of the information you 're working with			1
that 's what we call data structures , " @entity12 says			0
" to write a kernel without a data structure and have it be as consist and graceful as @entity36 would have been a much , much harder challenge			2
they needed a way to group all that data together , and they did n't have that with @entity109			0
" at the time , it was an unusual way to write an operating system , and this is what allowed @entity2 and @entity34 to eventually imagine porting the os to other platforms , which they did in the late 70s			1
" that opened the floodgates for @entity36 running everywhere , " @entity12 says			2
" it was all made possible by @entity54 " @entity39 , @entity205 and beyond at the same time , @entity128 forged its own way in the world , moving from @entity17 to the world 's universities and to @entity205 , the breakout software company of the 1980s			0
" the development of the c programming language was a huge step forward and was the right middle ground ... @entity128 struck exactly the right balance , to let you write at a high level and be much more productive , but when you needed to , you could control exactly what happened , " says @entity215 , chief scientist of @entity216 and @entity217 at @entity218			1
" [ it ] set the tone for the way that programming was done for several decades			0
" as @entity12 points out , the data structures that @entity144 built into @entity35 eventually gave rise to the object - oriented paradigm used by modern languages such as @entity58 and @entity57			1
the revolution began in 1973 , when @entity2 published his research paper on the language , and five years later , he and colleague @entity233 released the definitive c book : the @entity54			1
@entity233 had written the early tutorials for the language , and at some point , he " twisted @entity2 ' arm " into writing a book with him			1
@entity12 read the book while still an undergraduate at the @entity241 , picking it up one afternoon while heading home for a sick day			0
" that reference manual is a model of clarity and readability compared to latter manuals			0
it is justifiably a classic , " he says			0
" i read it while sick in bed , and it made me forget that i was sick			0
" like many university students , @entity12 had already started using the language			0
it had spread across college campuses because @entity17 started giving away the @entity36 source code			2
among so many other things , the operating system gave rise to the modern open source movement			0
@entity12 is n't overstating it when says the influence of @entity2 's work ca n't be overstated , and though @entity2 received the @entity266 in 1983 and the @entity267 in 1998 , he still has n't gotten his due			2
as @entity233 and @entity12 describe him , @entity2 was an unusually private person			2
" i worked across the hall from him for more than 20 years , and yet i feel like a do n't knew him all that well , " @entity12 says			0
but this does n't quite explain his low profile			0
@entity7 was a private person , but his insistence on privacy only fueled the cult of personality that surrounded him			0
@entity2 lived in a very different time and worked in a very different environment than someone like @entity7			2
it only makes sense that he would n't get his due			0
but those who matter understand the mark he left			0
" there 's that line from @entity288 about standing on the shoulders of giants , " says @entity233			2
" we 're all standing on @entity2 ' shoulders			1
" additional reporting by @entity294 subscribe to @entity0 for less than $ 1 an issue and get a free gift ! click here ! copyright 2011 @entity298 .			0

@entity2 is the father of the c programming language
@entity2 used @entity35 to build @entity36 , the os that so much is built on
" we 're all standing on @entity2 ' shoulders , " expert says

@entity22:Google+
@entity128:C
@entity24:New Jersey
@entity80:Computer Science
@entity81:Artificial Intelligence Laboratory
@entity114:B.
@entity118:BCPL
@entity2:Dennis
@entity216:NVIDIA
@entity0:WIRED magazine
@entity7:Jobs
@entity218:Stanford
@entity52:Internet
@entity51:C. The
@entity298:Wired.com
@entity78:MIT
@entity54:C Programming Language
@entity75:iPad
@entity74:iPhone
@entity58:C++
@entity71:Mac OS X
@entity73:iOS
@entity17:Bell Labs
@entity57:Java
@entity35:C
@entity34:Thompson
@entity36:UNIX
@entity39:Apple
@entity233:Kernighan
@entity294:Jon Stokes
@entity217:Bell Professor of Engineering
@entity241:University of Toronto
@entity109:Fortran
@entity267:National Medal of Technology
@entity94:B
@entity205:Microsoft
@entity144:Richie
@entity117:Bonnie
@entity76:Martin Rinard
@entity120:Cambridge
@entity215:Bill Dally
@entity266:Turing Award
@entity42:CNN
@entity41:GeekOut
@entity12:Pike
@entity69:Windows
@entity288:Newton
@entity48:C
@entity60:Python
@entity61:Ruby